<template>
  <div id="app">
    <h1 class="title">Список сетей и их иерархия</h1>

    <!-- Поле ввода и кнопка для поиска -->
    <div class="search-container">
      <input
        type="text"
        v-model="searchIp"
        placeholder="Введите IP-адрес"
        class="search-input"
      />
      <button @click="searchNetwork" class="search-button">Поиск</button>
    </div>

    <!-- Кнопка "Назад" для сброса поиска -->
    <div v-if="filteredNetworks.length > 0" class="back-container">
      <button @click="resetSearch" class="back-button">Назад</button>
    </div>

    <!-- Форма для ввода данных о пуле -->
    <div class="pool-container">
      <h2>Выделение пула из сети</h2>
      <label for="firstAddress">Первый адрес:</label>
      <input v-model="firstAddress" type="text" placeholder="Первый адрес" />

      <label for="lastAddress">Последний адрес:</label>
      <input v-model="lastAddress" type="text" placeholder="Последний адрес" />

      <label for="poolSize">Размер пула:</label>
      <input v-model="poolSize" type="number" placeholder="Размер пула" />

      <button @click="calculatePool" class="calculate-button">Рассчитать пул</button>

      <div v-if="errorMessage" class="error-message">{{ errorMessage }}</div>

      <div v-if="calculatedPool">
        <h3>Рассчитанный пул:</h3>
        <p>Первый адрес: {{ calculatedPool.firstAddress }}</p>
        <p>Последний адрес: {{ calculatedPool.lastAddress }}</p>
        <p>Размер пула: {{ calculatedPool.poolSize }}</p>
      </div>
    </div>

    <!-- Таблица сетей -->
    <table class="network-table">
      <thead>
        <tr>
          <th>Сеть</th>
          <th>Дочерние сети</th>
          <th>Действия</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="network in topLevelNetworks" :key="network.id">
          <td>{{ network.name }}</td>
          <td>
            <ul>
              <li v-for="child in getChildren(network.id)" :key="child.id">
                {{ child.name }}
              </li>
            </ul>
          </td>
          <td>
            <button @click="editNetwork(network)" class="edit-button">Редактировать</button>
            <button @click="deleteNetwork(network.id)" class="delete-button">Удалить</button>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Форма для добавления новой сети -->
    <div class="add-network-container">
      <h2>Добавить новую сеть</h2>
      <input
        v-model="newNetworkName"
        type="text"
        placeholder="Имя новой сети"
        class="input-field"
      />
      <input
        v-model="newNetworkCidr"
        type="text"
        placeholder="CIDR новой сети"
        class="input-field"
      />
      <select v-model="newNetworkParentId" class="input-field">
        <option :value="0">Без родительской сети (Главная сеть)</option>
        <option
          v-for="option in topLevelNetworks"
          :key="option.id"
          :value="option.id"
        >
          {{ option.name }}
        </option>
      </select>
      <button @click="addNetwork" class="add-network-button">Добавить сеть</button>
    </div>

    <!-- Форма для редактирования сети -->
    <div v-if="editingNetwork" class="edit-network-container">
      <h2>Редактировать сеть</h2>
      <input
        v-model="editingNetwork.name"
        type="text"
        placeholder="Имя сети"
        class="input-field"
      />
      <input
        v-model="editingNetwork.cidr"
        type="text"
        placeholder="CIDR сети"
        class="input-field"
      />
      <button @click="saveNetwork" class="save-button">Сохранить изменения</button>
      <button @click="cancelEdit" class="cancel-button">Отменить</button>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'App',
  data() {
    return {
      networks: [],
      allNetworks: [],
      searchIp: '',
      filteredNetworks: [],
      firstAddress: '',
      lastAddress: '',
      poolSize: '',
      errorMessage: '',
      calculatedPool: null,
      editingNetwork: null,
      newNetworkName: '',
      newNetworkCidr: '',
      newNetworkParentId: 0,
      hierarchyTree: [],
      childrenMap: {},
    };
  },
  mounted() {
    this.fetchNetworks();
  },
  computed: {
    topLevelNetworks() {
      return this.networks.filter(network => network.parent_id === null);
    }
  },
  methods: {
    async fetchNetworks() {
      try {
        const [networksResponse, treeResponse] = await Promise.all([
          axios.get('http://82.144.67.254:9001/api/v1/network/'),
          axios.get('http://82.144.67.254:9001/api/v1/network/tree'),
        ]);

        const cleanedNetworks = networksResponse.data.map(n => ({
          ...n,
          parent_id: n.parent_id === 0 ? null : n.parent_id
        }));

        this.networks = cleanedNetworks;
        this.hierarchyTree = treeResponse.data;
        this.buildChildrenMap(this.hierarchyTree);
        this.filteredNetworks = cleanedNetworks;
        this.allNetworks = [...cleanedNetworks];
      } catch (error) {
        console.error('Ошибка при получении данных:', error);
      }
    },

    buildChildrenMap(tree) {
      const map = {};
      const traverse = (nodes) => {
        for (const node of nodes) {
          if (node.parent_id) {
            if (!map[node.parent_id]) {
              map[node.parent_id] = [];
            }
            map[node.parent_id].push(node);
          }
          if (node.children && node.children.length > 0) {
            traverse(node.children);
          }
        }
      };
      traverse(tree);
      this.childrenMap = map;
    },

    getChildren(parentId) {
      return this.childrenMap[parentId] || [];
    },

    searchNetwork() {
      if (!this.isValidIp(this.searchIp)) {
        alert('Введите корректный IP-адрес!');
        return;
      }

      this.filteredNetworks = this.networks.filter((network) =>
        this.isIpInNetwork(this.searchIp, network.cidr)
      );

      if (this.filteredNetworks.length === 0) {
        alert('Сеть по данному IP не найдена!');
        this.filteredNetworks = [...this.networks];
      }

      // Не обновляем childrenMap, чтобы не нарушить иерархию
    },

    resetSearch() {
      this.filteredNetworks = [...this.networks];
      this.searchIp = '';
      this.buildChildrenMap(this.hierarchyTree); // восстановим иерархию
    },

    isValidIp(ip) {
      return ip && ip.match(/^(\d{1,3}\.){3}\d{1,3}$/);
    },

    isIpInNetwork(ip, network) {
      const ipInt = this.parseIp(ip);
      const [cidrIp, maskLength] = network.split('/');
      const cidrInt = this.parseIp(cidrIp);
      const mask = ~((1 << (32 - parseInt(maskLength))) - 1) >>> 0;
      return (ipInt & mask) === (cidrInt & mask);
    },

    parseIp(ip) {
      const parts = ip.split('.').map(Number);
      return (
        (parts[0] << 24) |
        (parts[1] << 16) |
        (parts[2] << 8) |
        parts[3]
      ) >>> 0;
    },

    formatIp(ipInt) {
      return [
        (ipInt >>> 24) & 255,
        (ipInt >>> 16) & 255,
        (ipInt >>> 8) & 255,
        ipInt & 255,
      ].join('.');
    },

    normalizeCidr(cidr) {
      const [ip, prefix] = cidr.split('/');
      const ipInt = this.parseIp(ip);
      const mask = ~((1 << (32 - parseInt(prefix))) - 1) >>> 0;
      const networkInt = ipInt & mask;
      const networkIp = this.formatIp(networkInt);
      return `${networkIp}/${prefix}`;
    },

    async addNetwork() {
      try {
        const newNetwork = {
          name: this.newNetworkName,
          cidr: this.normalizeCidr(this.newNetworkCidr),
          parent_id: this.newNetworkParentId === 0 ? null : this.newNetworkParentId,
        };

        await axios.post(
          `http://82.144.67.254:9001/api/v1/network/`,
          newNetwork,
          { headers: { 'Content-Type': 'application/json' } }
        );

        await this.fetchNetworks();

        this.newNetworkName = '';
        this.newNetworkCidr = '';
        this.newNetworkParentId = 0;
      } catch (error) {
        console.error('Ошибка при добавлении сети:', error);
      }
    },

    editNetwork(network) {
      this.editingNetwork = { ...network };
    },

    saveNetwork() {
      const updatedCidr = this.normalizeCidr(this.editingNetwork.cidr);
      axios
        .put(`http://82.144.67.254:9001/api/v1/network/${this.editingNetwork.id}`, {
          name: this.editingNetwork.name,
          cidr: updatedCidr,
        })
        .then((response) => {
          const index = this.networks.findIndex((n) => n.id === this.editingNetwork.id);
          if (index !== -1) {
            this.networks.splice(index, 1, response.data);
          }
          this.cancelEdit();
        })
        .catch((error) => {
          console.error('Ошибка при сохранении изменений:', error);
        });
    },

    cancelEdit() {
      this.editingNetwork = null;
    },

    async deleteNetwork(id) {
      try {
        await axios.delete(`http://82.144.67.254:9001/api/v1/network/${id}`);
        this.networks = this.networks.filter((network) => network.id !== id);
        this.filteredNetworks = this.networks;
      } catch (error) {
        console.error('Ошибка при удалении сети:', error);
      }
    },

    calculatePool() {
      if (this.firstAddress && this.lastAddress) {
        const first = this.parseIp(this.firstAddress);
        const last = this.parseIp(this.lastAddress);
        const poolSize = last - first + 1;

        this.calculatedPool = {
          firstAddress: this.firstAddress,
          lastAddress: this.lastAddress,
          poolSize,
        };
        this.errorMessage = '';
      } else if (this.firstAddress && this.poolSize) {
        const first = this.parseIp(this.firstAddress);
        const last = first + parseInt(this.poolSize) - 1;

        this.calculatedPool = {
          firstAddress: this.firstAddress,
          lastAddress: this.formatIp(last),
          poolSize: this.poolSize,
        };
        this.errorMessage = '';
      } else if (this.lastAddress && this.poolSize) {
        const last = this.parseIp(this.lastAddress);
        const first = last - parseInt(this.poolSize) + 1;

        this.calculatedPool = {
          firstAddress: this.formatIp(first),
          lastAddress: this.lastAddress,
          poolSize: this.poolSize,
        };
        this.errorMessage = '';
      } else {
        this.errorMessage = 'Нужно задать два параметра: первый адрес, последний адрес или размер пула';
        this.calculatedPool = null;
      }
    },
  },
};
</script>





<style scoped>
.network-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}
.network-table th,
.network-table td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}
.network-table th {
  background-color: #f2f2f2;
}
ul {
  list-style-type: none;
  padding-left: 0;
}
.search-container {
  margin-top: 20px;
  text-align: center;
}
.search-input {
  padding: 8px;
  width: 200px;
}
.search-button {
  padding: 8px;
  cursor: pointer;
}
.back-button {
  padding: 8px;
  margin-top: 10px;
  cursor: pointer;
}
.input-field {
  padding: 8px;
  width: 100%;
  margin-bottom: 10px;
}
.add-network-container {
  margin-top: 20px;
  padding: 20px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}
.add-network-button {
  margin-top: 10px;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  cursor: pointer;
}
.add-network-button:hover {
  background-color: #218838;
}
</style>

<style scoped>
/* Исходные стили, как у вас были */
.add-network-container {
  margin-top: 20px;
  padding: 20px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}
.add-network-container h2 {
  margin-bottom: 10px;
}
.add-network-button {
  margin-top: 10px;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  cursor: pointer;
}
.add-network-button:hover {
  background-color: #218838;
}
.pool-container {
  margin-top: 30px;
  padding: 20px;
  background-color: #e0f7fa;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.pool-container input {
  padding: 10px;
  font-size: 16px;
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 180px;
}
.calculate-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.calculate-button:hover {
  background-color: #45a049;
}
.error-message {
  color: red;
  font-size: 16px;
  margin-top: 10px;
}
.no-results {
  color: red;
  text-align: center;
  margin-top: 20px;
  font-size: 18px;
}
.search-container {
  margin-bottom: 20px;
}
.search-input {
  padding: 8px;
  font-size: 16px;
  width: 200px;
}
.search-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #2196F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.search-button:hover {
  background-color: #0b7dda;
}
.back-container {
  margin-top: 10px;
}
.back-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #FF5722;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.back-button:hover {
  background-color: #d45d16;
}
.tree {
  margin-top: 30px;
}
.tree-item {
  padding: 10px;
  background-color: #f0f0f0;
  margin: 5px 0;
  border-radius: 4px;
}
.network-name {
  font-weight: bold;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
}
.network-title {
  flex: 1 1 auto;
}
.network-actions {
  display: flex;
  gap: 10px;
  flex: 0 0 auto;
}
/* Адаптивность: при ширине экрана до 600px кнопки становятся блочными и переносятся вниз */
@media (max-width: 600px) {
  .network-actions {
    width: 100%;
    margin-top: 5px;
    justify-content: flex-start;
  }
  .network-name {
    flex-direction: column;
    align-items: flex-start;
  }
}
.edit-button,
.delete-button {
  padding: 5px 10px;
  font-size: 14px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.edit-button:hover,
.delete-button:hover {
  background-color: #0056b3;
}
.subtree {
  margin-left: 20px;
}
.edit-form-container {
  margin-top: 20px;
  padding: 20px;
  background-color: #f9f9f9;
  border: 1px solid #ccc;
  border-radius: 8px;
}
.input-field {
  display: block;
  width: 100%;
  padding: 8px 10px;
  margin-bottom: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.action-button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}
.action-button:hover {
  background-color: #45a049;
}
.cancel-button {
  padding: 10px 20px;
  background-color: #FF5722;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.cancel-button:hover {
  background-color: #d45d16;
}
</style>

<style scoped>
.network-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}
.network-table th,
.network-table td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}
.network-table th {
  background-color: #f2f2f2;
}
ul {
  list-style-type: none;
  padding-left: 0;
}
.search-container {
  margin-top: 20px;
  text-align: center;
}
.search-input {
  padding: 8px;
  width: 200px;
}
.search-button {
  padding: 8px;
  cursor: pointer;
}
.back-button {
  padding: 8px;
  margin-top: 10px;
  cursor: pointer;
}
.input-field {
  padding: 8px;
  width: 100%;
  margin-bottom: 10px;
}
.add-network-container {
  margin-top: 20px;
  padding: 20px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}
.add-network-button {
  margin-top: 10px;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  cursor: pointer;
}
.add-network-button:hover {
  background-color: #218838;
}
</style>

<style scoped>
/* Исходные стили, как у вас были */
.add-network-container {
  margin-top: 20px;
  padding: 20px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}
.add-network-container h2 {
  margin-bottom: 10px;
}
.add-network-button {
  margin-top: 10px;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  cursor: pointer;
}
.add-network-button:hover {
  background-color: #218838;
}
.pool-container {
  margin-top: 30px;
  padding: 20px;
  background-color: #e0f7fa;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.pool-container input {
  padding: 10px;
  font-size: 16px;
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 180px;
}
.calculate-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.calculate-button:hover {
  background-color: #45a049;
}
.error-message {
  color: red;
  font-size: 16px;
  margin-top: 10px;
}
.no-results {
  color: red;
  text-align: center;
  margin-top: 20px;
  font-size: 18px;
}
.search-container {
  margin-bottom: 20px;
}
.search-input {
  padding: 8px;
  font-size: 16px;
  width: 200px;
}
.search-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #2196F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.search-button:hover {
  background-color: #0b7dda;
}
.back-container {
  margin-top: 10px;
}
.back-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #FF5722;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.back-button:hover {
  background-color: #d45d16;
}
.tree {
  margin-top: 30px;
}
.tree-item {
  padding: 10px;
  background-color: #f0f0f0;
  margin: 5px 0;
  border-radius: 4px;
}
.network-name {
  font-weight: bold;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
}
.network-title {
  flex: 1 1 auto;
}
.network-actions {
  display: flex;
  gap: 10px;
  flex: 0 0 auto;
}
/* Адаптивность: при ширине экрана до 600px кнопки становятся блочными и переносятся вниз */
@media (max-width: 600px) {
  .network-actions {
    width: 100%;
    margin-top: 5px;
    justify-content: flex-start;
  }
  .network-name {
    flex-direction: column;
    align-items: flex-start;
  }
}
.edit-button,
.delete-button {
  padding: 5px 10px;
  font-size: 14px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.edit-button:hover,
.delete-button:hover {
  background-color: #0056b3;
}
.subtree {
  margin-left: 20px;
}
.edit-form-container {
  margin-top: 20px;
  padding: 20px;
  background-color: #f9f9f9;
  border: 1px solid #ccc;
  border-radius: 8px;
}
.input-field {
  display: block;
  width: 100%;
  padding: 8px 10px;
  margin-bottom: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.action-button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}
.action-button:hover {
  background-color: #45a049;
}
.cancel-button {
  padding: 10px 20px;
  background-color: #FF5722;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.cancel-button:hover {
  background-color: #d45d16;
}
</style>
